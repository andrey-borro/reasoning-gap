{"messages": [{"role": "user", "content": [{"text": "You will be given a PDDL domain, as well as an example problem and solution for that domain. Your goal is to write a strategy for the domain which will be used as part of a prompt for a weaker LLM to solve this problem. The strategy should be threefold. \n\n---\nFirstly, a brief overview of the high-level dynamics, e.g. how the actions interact and what they are used for in the domain. Do not just repeat the preconditions and effects in PDDL - the LLM will have access to these. Instead, use English to explain the environment and how the actions are used to do things in it. Finish this overview with a brief list of key constraints about objects within this environment (see example).\n\nSecondly, a high-level guide to solving a general problem within this domain. The guide should open with \"To solve the problem, follow these step-by-step instructions:\". Follow this with an instruction step outlining how to interpret the goal configuration in the context of planning your solution. After this, give simple and clear instructions on how to solve the task, step-by-step. Remember that you are talking to an LLM. It has no memory or space to \"visualise\" a problem, nor does it respond well to being philosophical. Instead, give clear and very simple actionable instructions for it to follow. Each instruction should represent a \"big picture\" step for the agent to follow. Then, explain how to achieve that step in sub-instructions. Absolutely prioritise the most simple (to understand and follow) instructions, even if it means having a longer solution. Do not forget that the LLM executing this is weak, and should not try to do complex reasoning if it can be avoided. Your job is to do as much of the thinking as you can, and to give it clear steps to take action on.\n\nThirdly, give a list (at most five) of common mistakes that you assume a weaker LLM is likely to make and how to avoid them. Prioritise the ones that you think might be most likely to stump the LLM. \n\nThroughout the strategy, feel free to use general examples (but keep them very short and concise, as they should not take up much of the strategy at all).\n\n---\n\nA (slightly less detailed than you should aim for) example for the gripper domain could look like:\n\nDomain Overview:\nThe domain consists of balls (e.g. balla, ballb, ballc) in rooms (rooma, roomb ....), with a robot that travels between the two rooms. The robot can only pick up to two balls at a time using the pickup action - one in each hand, specified as part of the action e.g. (pickup balla rooma left), and only when they are with him in the room that he is currently on. The robot moves between rooms using the move action, taking the balls in his hands with him, and dropping a ball will drop it into the room that the robot is currently in. \n\nKey Contstraints\n - the robot can hold at most 2 balls\n - balls must be in the same room as the robot to be picked up\n- the robot must have a free hand to pick up a ball\n\nSolution Overview:\nTo solve the problem, follow these step-by-step instructions:\n1. Observe the required goal location for the balls e.g. (at roomb balla)\n2. Move the robot to the location of a ball that needs to move\n- ensure that it has dropped off whichever balls it was moving prior\n3. pick up the ball, as well as any other ball (if any) that is in the same room and needs to go to the same destination room\n- (short example)\n4. move the robot to the destination room and drop whichever balls it is holding and need to be in that room\n5. repeat this process until all balls are where they need to be, tracking which balls remain\n\nCommon Mistakes:\nDo not pick up balls once they are in the room where they need to be, they do not need to be touched again. \nDo not try and pick up balls if they are in different rooms, the robot can only pick up balls in the same room. \netc. \n\n---\n\nThe PDDL domain that you are writing the strategy for:\naction : pickup (block)\npreconds : (clear block), (ontable block), (handempty)\neffects : (holding block), not(ontable block), not(clear block), not(handempty)\n\naction : putdown (block)\npreconds : (holding block)\neffects : not(holding block), (clear block), (ontable block), (handempty)\n\naction : unstack (top-block bottom-block)\npreconds : (on top-block bottom-block), (clear top-block), (handempty)\neffects : (holding top-block), (clear bottom-block), not(on top-block bottom-block), not(clear bottom-block), not(handempty)\n\naction : stack (top-block bottom-block)\npreconds : (holding top-block), (clear bottom-block)\neffects : (on top-block bottom-block), (clear top-block), (handempty), not(holding top-block), not(clear bottom-block)\nHere is an example problem within this domain:\n\nInitial State:\n(clear a)\n(clear d)\n(handempty)\n(on a b)\n(on d c)\n(ontable b)\n(ontable c)\n\nGoal:\n(on a b)\n(on b c)\n(on c d)\n\nSolution:\n(unstack d c)\n(putdown d)\n(pickup c)\n(stack c d)\n(unstack a b)\n(putdown a)\n(pickup b)\n(stack b c)\n(pickup a)\n(stack a b)\n", "type": "text"}]}], "response": {"content": "**Domain Overview:**\n\nThe Blocks World domain consists of a set of blocks (e.g., a, b, c, d) that can be arranged on a table or stacked upon one another to form towers. A single robot arm manipulates the blocks using four primary actions:\n\n- **Pickup(block):** The robot picks up a block from the table. This action requires that the block is clear (no other block on top of it), is on the table, and the robot's hand is empty.\n  \n- **Putdown(block):** The robot places the block it is holding onto the table, freeing up its hand for other actions.\n  \n- **Unstack(top-block, bottom-block):** The robot removes the top block from a stack, separating it from the block beneath. This action requires that the top block is clear, the robot's hand is empty, and the top block is directly on the bottom block.\n  \n- **Stack(top-block, bottom-block):** The robot places the block it is holding onto another block. The bottom block must be clear for this action to be successful.\n\nThe objective in this domain is to rearrange the blocks to match a desired goal configuration by appropriately stacking and unstacking them.\n\n**Key Constraints:**\n\n- The robot can hold only **one block at a time**.\n- A block must be **clear** (nothing on top of it) to be picked up or unstacked.\n- To **stack** a block onto another, the block being stacked upon must be **clear**.\n- The robot's hand must be **empty** to pick up or unstack a block.\n- Blocks can be either **on the table** or **on top of another block**.\n\n---\n\n**Solution Overview:**\n\nTo solve the problem, follow these step-by-step instructions:\n\n1. **Interpret the Goal Configuration:**\n\n   - Examine the goal state to determine the desired arrangement of the blocks.\n   - Identify the sequence of blocks in each stack from bottom to top.\n   - Note which blocks need to be moved and which are already in the correct position.\n\n2. **Plan the Assembly of Stacks from the Bottom Up:**\n\n   - Determine the lowest-level blocks (those that should be on the table) in the goal configuration.\n   - Plan to build each stack starting with the bottom block and adding each subsequent block on top.\n   - Ensure that blocks needed later are not buried under other blocks.\n\n3. **Clear Any Obstructing Blocks:**\n\n   - If a required block is not clear, make it clear by removing any blocks on top of it.\n   - Use the **Unstack** action to remove obstructing blocks:\n     - **Sub-instructions:**\n       - Unstack the top block from the required block.\n       - Put down the unstacked block on the table using **Putdown**.\n       - Repeat if there are multiple blocks to clear.\n\n4. **Position the Bottom Blocks on the Table:**\n\n   - Ensure that the bottom blocks of the goal stacks are on the table.\n   - If a bottom block is on top of another block, unstack it and put it on the table:\n     - **Sub-instructions:**\n       - Unstack the bottom block from any blocks beneath it.\n       - Put down the bottom block on the table using **Putdown**.\n\n5. **Build the Stacks Sequentially:**\n\n   - For each stack, starting from the bottom block:\n     - **Sub-instructions:**\n       - Ensure the bottom block is clear (nothing on top) and in the correct position.\n       - Pick up the block to be stacked next using **Pickup** (if on the table) or **Unstack** (if on another block).\n       - Stack the block onto the bottom block using **Stack**.\n       - Confirm that the newly placed block is correctly positioned.\n\n6. **Repeat Until the Goal Configuration is Achieved:**\n\n   - Continue the process for each block in the goal configuration.\n   - Verify after each action that blocks are correctly placed and that constraints are maintained.\n   - Adjust the plan if necessary to handle any unexpected obstructions.\n\n**Example Execution:**\n\n- To build a stack where block **c** is on block **d**, and block **d** is on the table:\n  - Ensure block **d** is on the table and clear.\n  - Pick up block **c** using **Pickup** (if on the table) or **Unstack** (if on another block).\n  - Stack block **c** onto block **d** using **Stack**.\n\n---\n\n**Common Mistakes:**\n\n1. **Trying to Move a Block That Is Not Clear:**\n\n   - **Issue:** Attempting to pick up or unstack a block that has another block on top of it.\n   - **Solution:** Always check that the block is clear before moving it. Unstack any blocks above it first.\n\n2. **Failing to Empty the Hand Before Picking Up Another Block:**\n\n   - **Issue:** Attempting to pick up or unstack a block while holding another block.\n   - **Solution:** Use **Putdown** or **Stack** to free up the robot's hand before attempting to pick up a new block.\n\n3. **Stacking Blocks onto Non-Clear Blocks:**\n\n   - **Issue:** Attempting to stack a block onto another block that is not clear.\n   - **Solution:** Ensure the bottom block is clear before stacking onto it.\n\n4. **Building Stacks Out of Order:**\n\n   - **Issue:** Placing blocks in a sequence that requires disassembly later.\n   - **Solution:** Always build stacks from the bottom up according to the goal configuration.\n\n5. **Moving Blocks Unnecessarily:**\n\n   - **Issue:** Moving blocks that are already in their goal position.\n   - **Solution:** Identify blocks that are already correctly placed and avoid moving them unless necessary to clear other blocks.", "model": "o1-preview-2024-09-12", "output_tokens": 1225, "input_tokens": 1261, "reasoning_tokens": 1920}}