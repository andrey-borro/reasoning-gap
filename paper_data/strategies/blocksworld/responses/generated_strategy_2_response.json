{"messages": [{"role": "user", "content": [{"text": "You will be given a PDDL domain, as well as an example problem and solution for that domain. Your goal is to write a strategy for the domain which will be used as part of a prompt for a weaker LLM to solve this problem. The strategy should be threefold. \n\n---\nFirstly, a brief overview of the high-level dynamics, e.g. how the actions interact and what they are used for in the domain. Do not just repeat the preconditions and effects in PDDL - the LLM will have access to these. Instead, use English to explain the environment and how the actions are used to do things in it. Finish this overview with a brief list of key constraints about objects within this environment (see example).\n\nSecondly, a high-level guide to solving a general problem within this domain. The guide should open with \"To solve the problem, follow these step-by-step instructions:\". Follow this with an instruction step outlining how to interpret the goal configuration in the context of planning your solution. After this, give simple and clear instructions on how to solve the task, step-by-step. Remember that you are talking to an LLM. It has no memory or space to \"visualise\" a problem, nor does it respond well to being philosophical. Instead, give clear and very simple actionable instructions for it to follow. Each instruction should represent a \"big picture\" step for the agent to follow. Then, explain how to achieve that step in sub-instructions. Absolutely prioritise the most simple (to understand and follow) instructions, even if it means having a longer solution. Do not forget that the LLM executing this is weak, and should not try to do complex reasoning if it can be avoided. Your job is to do as much of the thinking as you can, and to give it clear steps to take action on.\n\nThirdly, give a list (at most five) of common mistakes that you assume a weaker LLM is likely to make and how to avoid them. Prioritise the ones that you think might be most likely to stump the LLM. \n\nThroughout the strategy, feel free to use general examples (but keep them very short and concise, as they should not take up much of the strategy at all).\n\n---\n\nA (slightly less detailed than you should aim for) example for the gripper domain could look like:\n\nDomain Overview:\nThe domain consists of balls (e.g. balla, ballb, ballc) in rooms (rooma, roomb ....), with a robot that travels between the two rooms. The robot can only pick up to two balls at a time using the pickup action - one in each hand, specified as part of the action e.g. (pickup balla rooma left), and only when they are with him in the room that he is currently on. The robot moves between rooms using the move action, taking the balls in his hands with him, and dropping a ball will drop it into the room that the robot is currently in. \n\nKey Contstraints\n - the robot can hold at most 2 balls\n - balls must be in the same room as the robot to be picked up\n- the robot must have a free hand to pick up a ball\n\nSolution Overview:\nTo solve the problem, follow these step-by-step instructions:\n1. Observe the required goal location for the balls e.g. (at roomb balla)\n2. Move the robot to the location of a ball that needs to move\n- ensure that it has dropped off whichever balls it was moving prior\n3. pick up the ball, as well as any other ball (if any) that is in the same room and needs to go to the same destination room\n- (short example)\n4. move the robot to the destination room and drop whichever balls it is holding and need to be in that room\n5. repeat this process until all balls are where they need to be, tracking which balls remain\n\nCommon Mistakes:\nDo not pick up balls once they are in the room where they need to be, they do not need to be touched again. \nDo not try and pick up balls if they are in different rooms, the robot can only pick up balls in the same room. \netc. \n\n---\n\nThe PDDL domain that you are writing the strategy for:\naction : pickup (block)\npreconds : (clear block), (ontable block), (handempty)\neffects : (holding block), not(ontable block), not(clear block), not(handempty)\n\naction : putdown (block)\npreconds : (holding block)\neffects : not(holding block), (clear block), (ontable block), (handempty)\n\naction : unstack (top-block bottom-block)\npreconds : (on top-block bottom-block), (clear top-block), (handempty)\neffects : (holding top-block), (clear bottom-block), not(on top-block bottom-block), not(clear bottom-block), not(handempty)\n\naction : stack (top-block bottom-block)\npreconds : (holding top-block), (clear bottom-block)\neffects : (on top-block bottom-block), (clear top-block), (handempty), not(holding top-block), not(clear bottom-block)\nHere is an example problem within this domain:\n\nInitial State:\n(clear a)\n(clear d)\n(handempty)\n(on a b)\n(on d c)\n(ontable b)\n(ontable c)\n\nGoal:\n(on a b)\n(on b c)\n(on c d)\n\nSolution:\n(unstack d c)\n(putdown d)\n(pickup c)\n(stack c d)\n(unstack a b)\n(putdown a)\n(pickup b)\n(stack b c)\n(pickup a)\n(stack a b)\n", "type": "text"}]}], "response": {"content": "**Domain Overview:**\n\nIn this domain, we have a set of blocks that can be arranged either on a table or stacked on top of each other to form towers. A robotic arm manipulates the blocks to achieve a desired configuration specified in the goal state. The main actions the robot can perform are:\n\n- **Pickup**: Grasping a clear block from the table when the robot's hand is empty.\n- **Putdown**: Placing a held block onto the table, freeing the robot's hand.\n- **Unstack**: Removing a clear block from atop another block when the robot's hand is empty.\n- **Stack**: Placing a held block onto a clear block, creating or adding to a stack.\n\n**Key Constraints:**\n\n- The robot can hold **only one block at a time**.\n- A block must be **clear** (no blocks on top) to be picked up or unstacked.\n- The robot's hand must be **empty** to pick up or unstack a block.\n- A block can only be stacked onto another block that is **clear**.\n- Only one block can be directly on top of another block.\n\n---\n\n**Solution Overview:**\n\nTo solve the problem, follow these step-by-step instructions:\n\n1. **Interpret the Goal State:**\n   - **a.** Examine the goal conditions to determine the desired final positions of all blocks.\n   - **b.** For each required stack, list the blocks from **bottom to top** to understand the stacking order.\n   - *Example:* If the goal is `(on a b)` and `(on b c)`, the stacking order is `c` (bottom), `b`, then `a` (top).\n\n2. **Assess the Initial State:**\n   - **a.** Identify the current positions of all blocks.\n   - **b.** Note any discrepancies between the initial state and the goal state.\n   - **c.** Determine which blocks need to be moved and which are already in the correct position.\n\n3. **Plan the Sequence of Actions:**\n   - **a.** Prioritize moving blocks that form the **base of the goal stacks** first.\n   - **b.** Plan to build stacks **from the bottom up**, placing the bottom blocks before the ones above.\n\n4. **Clear Any Obstructing Blocks:**\n   - **a.** For each block that needs to be moved but isn't clear:\n     - **i.** Use `unstack` to remove the block on top.\n     - **ii.** Use `putdown` to place the unneeded block onto the table.\n     - **iii.** Repeat until the target block is clear.\n   - **b.** Ensure that any blocks not part of the goal configuration are **placed out of the way** on the table.\n\n5. **Position the Bottom Blocks:**\n   - **a.** If a bottom block of a goal stack is not on the table:\n     - **i.** Clear any blocks on top using `unstack` and `putdown`.\n     - **ii.** Use `unstack` or `pickup` to hold the block.\n     - **iii.** Use `putdown` to place it on the table.\n   - **b.** Confirm that the bottom block is now on the table and clear.\n\n6. **Build the Goal Stacks:**\n   - **For each remaining block in the goal stack (from bottom to top):**\n     - **a.** **Prepare the Block to Stack:**\n       - **i.** If the block is not clear, clear it using `unstack` and `putdown`.\n       - **ii.** Ensure your hand is empty (`handempty` is true).\n       - **iii.** Use `pickup` (if on table) or `unstack` (if on another block) to hold the block.\n     - **b.** **Prepare the Target Block:**\n       - **i.** Ensure the block you will stack onto is clear.\n     - **c.** **Stack the Block:**\n       - **i.** Use `stack` to place the held block onto the target block.\n     - **d.** **Update the State:**\n       - **i.** Your hand is now empty.\n       - **ii.** The block you just stacked is no longer clear.\n       - **iii.** The block underneath is no longer clear if it wasn't already.\n\n7. **Repeat Until Goal State Is Achieved:**\n   - **a.** Continue the process for all blocks until they are in their goal positions.\n   - **b.** Verify that the final configuration matches the goal state.\n\n---\n\n**Common Mistakes:**\n\n1. **Attempting to Move a Block That Is Not Clear:**\n   - *Avoidance:* Always check that a block is clear before trying to pick it up or unstack it.\n\n2. **Forgetting to Empty the Robot's Hand:**\n   - *Avoidance:* Ensure the robot's hand is empty (`handempty` is true) before attempting to pick up or unstack a block.\n\n3. **Stacking onto a Block That Is Not Clear:**\n   - *Avoidance:* Before stacking, confirm that the target block has no blocks on top of it.\n\n4. **Not Removing Obstructing Blocks:**\n   - *Avoidance:* Move any blocks that are on top of or blocking required blocks by unstacking and putting them down on the table.\n\n5. **Incorrect Stack Order:**\n   - *Avoidance:* Always build stacks from the **bottom up**, placing lower blocks before higher ones to maintain stability and correctness.\n\n---\n\nBy carefully following these steps and being mindful of common pitfalls, you can successfully rearrange the blocks to match any goal configuration within this domain.", "model": "o1-preview-2024-09-12", "output_tokens": 1216, "input_tokens": 1261, "reasoning_tokens": 4480}}