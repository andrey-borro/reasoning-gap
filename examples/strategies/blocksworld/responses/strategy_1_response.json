{"messages": [{"role": "user", "content": [{"text": "You will be given a PDDL domain, as well as an example problem and solution for that domain. Your goal is to write a strategy for the domain which will be used as part of a prompt for a weaker LLM to solve this problem. The strategy should be threefold. \n\n---\nFirstly, a brief overview of the high-level dynamics, e.g. how the actions interact and what they are used for in the domain. Do not just repeat the preconditions and effects in PDDL - the LLM will have access to these. Instead, use English to explain the environment and how the actions are used to do things in it. Finish this overview with a brief list of key constraints about objects within this environment (see example).\n\nSecondly, a high-level guide to solving a general problem within this domain. The guide should open with \"To solve the problem, follow these step-by-step instructions:\". Follow this with an instruction step outlining how to interpret the goal configuration in the context of planning your solution. After this, give simple and clear instructions on how to solve the task, step-by-step. Remember that you are talking to an LLM. It has no memory or space to \"visualise\" a problem, nor does it respond well to being philosophical. Instead, give clear and very simple actionable instructions for it to follow. Each instruction should represent a \"big picture\" step for the agent to follow. Then, explain how to achieve that step in sub-instructions. Absolutely prioritise the most simple (to understand and follow) instructions, even if it means having a longer solution. Do not forget that the LLM executing this is weak, and should not try to do complex reasoning if it can be avoided. Your job is to do as much of the thinking as you can, and to give it clear steps to take action on.\n\nThirdly, give a list (at most five) of common mistakes that you assume a weaker LLM is likely to make and how to avoid them. Prioritise the ones that you think might be most likely to stump the LLM. \n\nThroughout the strategy, feel free to use general examples (but keep them very short and concise, as they should not take up much of the strategy at all).\n\n---\n\nA (slightly less detailed than you should aim for) example for the gripper domain could look like:\n\nDomain Overview:\nThe domain consists of balls (e.g. balla, ballb, ballc) in rooms (rooma, roomb ....), with a robot that travels between the two rooms. The robot can only pick up to two balls at a time using the pickup action - one in each hand, specified as part of the action e.g. (pickup balla rooma left), and only when they are with him in the room that he is currently on. The robot moves between rooms using the move action, taking the balls in his hands with him, and dropping a ball will drop it into the room that the robot is currently in. \n\nKey Constraints\n - the robot can hold at most 2 balls\n - balls must be in the same room as the robot to be picked up\n - the robot must have a free hand to pick up a ball\n\nSolution Overview:\nTo solve the problem, follow these step-by-step instructions:\n1. Observe the required goal location for the balls e.g. (at roomb balla)\n2. Move the robot to the location of a ball that needs to move\n- ensure that it has dropped off whichever balls it was moving prior\n3. pick up the ball, as well as any other ball (if any) that is in the same room and needs to go to the same destination room\n- (short example)\n4. move the robot to the destination room and drop whichever balls it is holding and need to be in that room\n5. repeat this process until all balls are where they need to be, tracking which balls remain\n\nCommon Mistakes:\nDo not pick up balls once they are in the room where they need to be, they do not need to be touched again. \nDo not try and pick up balls if they are in different rooms, the robot can only pick up balls in the same room. \netc. \n\n---\n\nThe PDDL domain that you are writing the strategy for:\naction : pickup (block)\npreconds : (clear block), (ontable block), (handempty)\neffects : (holding block), not(ontable block), not(clear block), not(handempty)\n\naction : putdown (block)\npreconds : (holding block)\neffects : not(holding block), (clear block), (ontable block), (handempty)\n\naction : unstack (top-block bottom-block)\npreconds : (on top-block bottom-block), (clear top-block), (handempty)\neffects : (holding top-block), (clear bottom-block), not(on top-block bottom-block), not(clear bottom-block), not(handempty)\n\naction : stack (top-block bottom-block)\npreconds : (holding top-block), (clear bottom-block)\neffects : (on top-block bottom-block), (clear top-block), (handempty), not(holding top-block), not(clear bottom-block)\nHere is an example problem within this domain:\n\nInitial State:\n(clear a)\n(clear d)\n(handempty)\n(on a b)\n(on d c)\n(ontable b)\n(ontable c)\n\nGoal:\n(on a b)\n(on b c)\n(on c d)\n\nSolution:\n(unstack d c)\n(putdown d)\n(pickup c)\n(stack c d)\n(unstack a b)\n(putdown a)\n(pickup b)\n(stack b c)\n(pickup a)\n(stack a b)\n", "type": "text"}]}], "response": {"content": "**Domain Overview:**\n\nIn this domain, we are working with blocks (such as blocks A, B, C, D) that can be stacked on top of each other or placed on a table. The objective is to manipulate these blocks to achieve a specific arrangement (the goal state) starting from an initial setup (the initial state). A single robotic arm is used to move the blocks, one at a time, using the following actions:\n\n- **Pickup**: The robot can pick up a clear block from the table if its hand is empty.\n- **Putdown**: The robot can put down a block it is holding onto the table, freeing up its hand.\n- **Unstack**: The robot can unstack a clear block from on top of another block if its hand is empty.\n- **Stack**: The robot can stack a block it is holding onto a clear block.\n\n**Key Constraints:**\n\n- The robot can hold only **one block at a time**.\n- A block must be **clear** (no block on top) to be moved.\n- The robot's hand must be **empty** to pick up or unstack a block.\n- To **stack** a block onto another, the target block must be **clear**.\n- Blocks can be placed on the **table** or stacked on other blocks.\n\n---\n\n**Solution Overview:**\n\nTo solve the problem, follow these step-by-step instructions:\n\n1. **Interpret the Goal Configuration:**\n   - **List the Goal Conditions**: Write down all the goal statements to understand where each block needs to be. For example:\n     - `(on A B)` means block A should be on block B.\n     - `(on B C)` means block B should be on block C.\n     - `(on C D)` means block C should be on block D.\n   - **Determine the Goal Stacks**: Identify the sequences of blocks that need to be stacked together.\n\n2. **Plan the Sequence of Moves:**\n   - **Identify the Order of Assembly**:\n     - Start with the **bottom blocks** of each stack and work upwards.\n     - Ensure that lower blocks are placed before stacking higher blocks onto them.\n     - For example, place block D first, then stack C on D, followed by B on C, and finally A on B.\n\n3. **Prepare Blocks for Movement:**\n   - **Ensure Blocks are Clear**:\n     - For each block that needs to be moved, check if it is **clear**.\n     - If a block has other blocks on top, **unstack** those blocks one at a time.\n       - Use `unstack` to remove the top block.\n       - Use `putdown` to place it on the table.\n     - Repeat until the target block is clear.\n\n4. **Move Blocks to Goal Positions:**\n   - **Place Bottom Blocks First**:\n     - If a bottom block (e.g., block D) is not in its goal position:\n       - **If it's buried**, unstack any blocks on top.\n       - **Move it to the table** if required.\n     - Ensure the bottom block is placed correctly.\n   - **Stack Upper Blocks Sequentially**:\n     - For each subsequent block (e.g., C, B, A):\n       - **Ensure the Target Block is Ready**:\n         - Verify that the block it needs to be stacked upon is **in position and clear**.\n       - **Pick Up or Unstack the Block**:\n         - If the block is on the table and clear, use `pickup`.\n         - If the block is on another block, use `unstack`.\n       - **Stack the Block onto the Target Block**:\n         - Use `stack` to place it onto the required block.\n     - **Example**:\n       - To stack block C onto block D:\n         - Ensure block D is in position and clear.\n         - If holding another block, use `putdown` to free the hand.\n         - Use `pickup` or `unstack` to get block C.\n         - Use `stack` to place block C onto block D.\n\n5. **Handle Temporarily Moved Blocks:**\n   - **Place Aside Unneeded Blocks**:\n     - Any blocks removed during unstacking that are not immediately needed should be placed on the table.\n   - **Keep Blocks Clear**:\n     - Ensure these blocks remain clear and do not interfere with upcoming moves.\n\n6. **Repeat Until Goal is Achieved:**\n   - **Continue the Process**:\n     - Repeat steps 3 to 5 for all blocks until every block is in its goal position.\n   - **Verify Goal Conditions**:\n     - Check that all goal statements are satisfied.\n\n---\n\n**Common Mistakes:**\n\n1. **Not Emptying the Hand Before Picking Up a Block:**\n   - *Issue*: Trying to pick up or unstack a block while already holding another block.\n   - *Avoidance*: Always use `putdown` to place the held block on the table before picking up a new block.\n\n2. **Moving a Block That is Not Clear:**\n   - *Issue*: Attempting to pick up or unstack a block that has another block on top.\n   - *Avoidance*: Ensure the block is clear by unstacking any blocks above it first.\n\n3. **Stacking Onto a Block That is Not Clear or Not in Position:**\n   - *Issue*: Trying to stack a block onto a target block that has another block on it or is not in its goal position.\n   - *Avoidance*: Confirm that the target block is both clear and correctly placed before stacking.\n\n4. **Misordering Block Placement:**\n   - *Issue*: Stacking blocks without following the correct sequence, causing conflicts later.\n   - *Avoidance*: Always start from the bottom blocks and proceed upwards, ensuring the proper order.\n\n5. **Leaving Temporarily Moved Blocks in the Way:**\n   - *Issue*: Placing blocks that were unstacked onto locations that interfere with future moves.\n   - *Avoidance*: Put down temporarily moved blocks on the table in areas that won't obstruct other blocks.\n\n---\n\nBy carefully following these instructions and being mindful of the common mistakes, you can systematically manipulate the blocks to reach the desired goal configuration.", "model": "o1-preview-2024-09-12", "output_tokens": 1305, "input_tokens": 1259, "reasoning_tokens": 3776}}